# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

package work_queue;
use base qw(Exporter);
use base qw(DynaLoader);
package work_queuec;
bootstrap work_queue;
package work_queue;
@EXPORT = qw();

# ---------- BASE METHODS -------------

package work_queue;

sub TIEHASH {
    my ($classname,$obj) = @_;
    return bless $obj, $classname;
}

sub CLEAR { }

sub FIRSTKEY { }

sub NEXTKEY { }

sub FETCH {
    my ($self,$field) = @_;
    my $member_func = "swig_${field}_get";
    $self->$member_func();
}

sub STORE {
    my ($self,$field,$newval) = @_;
    my $member_func = "swig_${field}_set";
    $self->$member_func($newval);
}

sub this {
    my $ptr = shift;
    return tied(%$ptr);
}


# ------- FUNCTION WRAPPERS --------

package work_queue;

*cctools_debug = *work_queuec::cctools_debug;
*cctools_fatal = *work_queuec::cctools_fatal;
*cctools_debug_config = *work_queuec::cctools_debug_config;
*cctools_debug_config_file = *work_queuec::cctools_debug_config_file;
*cctools_debug_config_file_size = *work_queuec::cctools_debug_config_file_size;
*cctools_debug_config_fatal = *work_queuec::cctools_debug_config_fatal;
*cctools_debug_config_getpid = *work_queuec::cctools_debug_config_getpid;
*cctools_debug_flags_set = *work_queuec::cctools_debug_flags_set;
*cctools_debug_flags_print = *work_queuec::cctools_debug_flags_print;
*cctools_debug_flags_clear = *work_queuec::cctools_debug_flags_clear;
*cctools_debug_set_flag_name = *work_queuec::cctools_debug_set_flag_name;
*cctools_debug_flags_restore = *work_queuec::cctools_debug_flags_restore;
*timestamp_get = *work_queuec::timestamp_get;
*timestamp_sleep = *work_queuec::timestamp_sleep;
*timestamp_file = *work_queuec::timestamp_file;
*work_queue_task_create = *work_queuec::work_queue_task_create;
*work_queue_task_specify_file = *work_queuec::work_queue_task_specify_file;
*work_queue_task_specify_buffer = *work_queuec::work_queue_task_specify_buffer;
*work_queue_task_specify_file_command = *work_queuec::work_queue_task_specify_file_command;
*work_queue_task_specify_tag = *work_queuec::work_queue_task_specify_tag;
*work_queue_task_specify_algorithm = *work_queuec::work_queue_task_specify_algorithm;
*work_queue_task_specify_preferred_host = *work_queuec::work_queue_task_specify_preferred_host;
*work_queue_task_delete = *work_queuec::work_queue_task_delete;
*work_queue_create = *work_queuec::work_queue_create;
*work_queue_submit = *work_queuec::work_queue_submit;
*work_queue_wait = *work_queuec::work_queue_wait;
*work_queue_hungry = *work_queuec::work_queue_hungry;
*work_queue_empty = *work_queuec::work_queue_empty;
*work_queue_port = *work_queuec::work_queue_port;
*work_queue_name = *work_queuec::work_queue_name;
*work_queue_get_stats = *work_queuec::work_queue_get_stats;
*work_queue_activate_fast_abort = *work_queuec::work_queue_activate_fast_abort;
*work_queue_specify_algorithm = *work_queuec::work_queue_specify_algorithm;
*work_queue_specify_name = *work_queuec::work_queue_specify_name;
*work_queue_specify_priority = *work_queuec::work_queue_specify_priority;
*work_queue_specify_master_mode = *work_queuec::work_queue_specify_master_mode;
*work_queue_specify_worker_mode = *work_queuec::work_queue_specify_worker_mode;
*work_queue_shut_down_workers = *work_queuec::work_queue_shut_down_workers;
*work_queue_delete = *work_queuec::work_queue_delete;
*work_queue_task_specify_input_buf = *work_queuec::work_queue_task_specify_input_buf;
*work_queue_task_specify_input_file = *work_queuec::work_queue_task_specify_input_file;
*work_queue_task_specify_input_file_do_not_cache = *work_queuec::work_queue_task_specify_input_file_do_not_cache;
*work_queue_task_specify_output_file = *work_queuec::work_queue_task_specify_output_file;
*work_queue_task_specify_output_file_do_not_cache = *work_queuec::work_queue_task_specify_output_file_do_not_cache;

############# Class : work_queue::work_queue_task ##############

package work_queue::work_queue_task;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( work_queue );
%OWNER = ();
%ITERATORS = ();
*swig_tag_get = *work_queuec::work_queue_task_tag_get;
*swig_tag_set = *work_queuec::work_queue_task_tag_set;
*swig_command_line_get = *work_queuec::work_queue_task_command_line_get;
*swig_command_line_set = *work_queuec::work_queue_task_command_line_set;
*swig_worker_selection_algorithm_get = *work_queuec::work_queue_task_worker_selection_algorithm_get;
*swig_worker_selection_algorithm_set = *work_queuec::work_queue_task_worker_selection_algorithm_set;
*swig_output_get = *work_queuec::work_queue_task_output_get;
*swig_output_set = *work_queuec::work_queue_task_output_set;
*swig_input_files_get = *work_queuec::work_queue_task_input_files_get;
*swig_input_files_set = *work_queuec::work_queue_task_input_files_set;
*swig_output_files_get = *work_queuec::work_queue_task_output_files_get;
*swig_output_files_set = *work_queuec::work_queue_task_output_files_set;
*swig_preferred_host_get = *work_queuec::work_queue_task_preferred_host_get;
*swig_preferred_host_set = *work_queuec::work_queue_task_preferred_host_set;
*swig_taskid_get = *work_queuec::work_queue_task_taskid_get;
*swig_taskid_set = *work_queuec::work_queue_task_taskid_set;
*swig_status_get = *work_queuec::work_queue_task_status_get;
*swig_status_set = *work_queuec::work_queue_task_status_set;
*swig_return_status_get = *work_queuec::work_queue_task_return_status_get;
*swig_return_status_set = *work_queuec::work_queue_task_return_status_set;
*swig_result_get = *work_queuec::work_queue_task_result_get;
*swig_result_set = *work_queuec::work_queue_task_result_set;
*swig_host_get = *work_queuec::work_queue_task_host_get;
*swig_host_set = *work_queuec::work_queue_task_host_set;
*swig_submit_time_get = *work_queuec::work_queue_task_submit_time_get;
*swig_submit_time_set = *work_queuec::work_queue_task_submit_time_set;
*swig_transfer_start_time_get = *work_queuec::work_queue_task_transfer_start_time_get;
*swig_transfer_start_time_set = *work_queuec::work_queue_task_transfer_start_time_set;
*swig_start_time_get = *work_queuec::work_queue_task_start_time_get;
*swig_start_time_set = *work_queuec::work_queue_task_start_time_set;
*swig_finish_time_get = *work_queuec::work_queue_task_finish_time_get;
*swig_finish_time_set = *work_queuec::work_queue_task_finish_time_set;
*swig_computation_time_get = *work_queuec::work_queue_task_computation_time_get;
*swig_computation_time_set = *work_queuec::work_queue_task_computation_time_set;
*swig_total_bytes_transferred_get = *work_queuec::work_queue_task_total_bytes_transferred_get;
*swig_total_bytes_transferred_set = *work_queuec::work_queue_task_total_bytes_transferred_set;
*swig_total_transfer_time_get = *work_queuec::work_queue_task_total_transfer_time_get;
*swig_total_transfer_time_set = *work_queuec::work_queue_task_total_transfer_time_set;
sub new {
    my $pkg = shift;
    my $self = work_queuec::new_work_queue_task(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        work_queuec::delete_work_queue_task($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : work_queue::work_queue_stats ##############

package work_queue::work_queue_stats;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( work_queue );
%OWNER = ();
%ITERATORS = ();
*swig_workers_init_get = *work_queuec::work_queue_stats_workers_init_get;
*swig_workers_init_set = *work_queuec::work_queue_stats_workers_init_set;
*swig_workers_ready_get = *work_queuec::work_queue_stats_workers_ready_get;
*swig_workers_ready_set = *work_queuec::work_queue_stats_workers_ready_set;
*swig_workers_busy_get = *work_queuec::work_queue_stats_workers_busy_get;
*swig_workers_busy_set = *work_queuec::work_queue_stats_workers_busy_set;
*swig_tasks_running_get = *work_queuec::work_queue_stats_tasks_running_get;
*swig_tasks_running_set = *work_queuec::work_queue_stats_tasks_running_set;
*swig_tasks_waiting_get = *work_queuec::work_queue_stats_tasks_waiting_get;
*swig_tasks_waiting_set = *work_queuec::work_queue_stats_tasks_waiting_set;
*swig_tasks_complete_get = *work_queuec::work_queue_stats_tasks_complete_get;
*swig_tasks_complete_set = *work_queuec::work_queue_stats_tasks_complete_set;
*swig_total_tasks_dispatched_get = *work_queuec::work_queue_stats_total_tasks_dispatched_get;
*swig_total_tasks_dispatched_set = *work_queuec::work_queue_stats_total_tasks_dispatched_set;
*swig_total_tasks_complete_get = *work_queuec::work_queue_stats_total_tasks_complete_get;
*swig_total_tasks_complete_set = *work_queuec::work_queue_stats_total_tasks_complete_set;
*swig_total_workers_joined_get = *work_queuec::work_queue_stats_total_workers_joined_get;
*swig_total_workers_joined_set = *work_queuec::work_queue_stats_total_workers_joined_set;
*swig_total_workers_removed_get = *work_queuec::work_queue_stats_total_workers_removed_get;
*swig_total_workers_removed_set = *work_queuec::work_queue_stats_total_workers_removed_set;
*swig_total_bytes_sent_get = *work_queuec::work_queue_stats_total_bytes_sent_get;
*swig_total_bytes_sent_set = *work_queuec::work_queue_stats_total_bytes_sent_set;
*swig_total_bytes_received_get = *work_queuec::work_queue_stats_total_bytes_received_get;
*swig_total_bytes_received_set = *work_queuec::work_queue_stats_total_bytes_received_set;
*swig_total_send_time_get = *work_queuec::work_queue_stats_total_send_time_get;
*swig_total_send_time_set = *work_queuec::work_queue_stats_total_send_time_set;
*swig_total_receive_time_get = *work_queuec::work_queue_stats_total_receive_time_get;
*swig_total_receive_time_set = *work_queuec::work_queue_stats_total_receive_time_set;
sub new {
    my $pkg = shift;
    my $self = work_queuec::new_work_queue_stats(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        work_queuec::delete_work_queue_stats($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


# ------- VARIABLE STUBS --------

package work_queue;

*D_SYSCALL = *work_queuec::D_SYSCALL;
*D_CHANNEL = *work_queuec::D_CHANNEL;
*D_PROCESS = *work_queuec::D_PROCESS;
*D_NOTICE = *work_queuec::D_NOTICE;
*D_RESOLVE = *work_queuec::D_RESOLVE;
*D_LIBCALL = *work_queuec::D_LIBCALL;
*D_LOCAL = *work_queuec::D_LOCAL;
*D_DNS = *work_queuec::D_DNS;
*D_TCP = *work_queuec::D_TCP;
*D_AUTH = *work_queuec::D_AUTH;
*D_IRODS = *work_queuec::D_IRODS;
*D_CVMFS = *work_queuec::D_CVMFS;
*D_HTTP = *work_queuec::D_HTTP;
*D_FTP = *work_queuec::D_FTP;
*D_NEST = *work_queuec::D_NEST;
*D_GROW = *work_queuec::D_GROW;
*D_CHIRP = *work_queuec::D_CHIRP;
*D_DCAP = *work_queuec::D_DCAP;
*D_RFIO = *work_queuec::D_RFIO;
*D_GLITE = *work_queuec::D_GLITE;
*D_MULTI = *work_queuec::D_MULTI;
*D_PSTREE = *work_queuec::D_PSTREE;
*D_ALLOC = *work_queuec::D_ALLOC;
*D_LFC = *work_queuec::D_LFC;
*D_GFAL = *work_queuec::D_GFAL;
*D_SUMMARY = *work_queuec::D_SUMMARY;
*D_DEBUG = *work_queuec::D_DEBUG;
*D_LOGIN = *work_queuec::D_LOGIN;
*D_CACHE = *work_queuec::D_CACHE;
*D_POLL = *work_queuec::D_POLL;
*D_HDFS = *work_queuec::D_HDFS;
*D_WQ = *work_queuec::D_WQ;
*D_BXGRID = *work_queuec::D_BXGRID;
*D_USER = *work_queuec::D_USER;
*D_XROOTD = *work_queuec::D_XROOTD;
*D_MPI = *work_queuec::D_MPI;
*D_REMOTE = *work_queuec::D_REMOTE;
*D_ALL = *work_queuec::D_ALL;
*INT8_FORMAT = *work_queuec::INT8_FORMAT;
*INT16_FORMAT = *work_queuec::INT16_FORMAT;
*INT32_FORMAT = *work_queuec::INT32_FORMAT;
*INT64_FORMAT = *work_queuec::INT64_FORMAT;
*PTR_FORMAT = *work_queuec::PTR_FORMAT;
*UINT8_FORMAT = *work_queuec::UINT8_FORMAT;
*UINT16_FORMAT = *work_queuec::UINT16_FORMAT;
*UINT32_FORMAT = *work_queuec::UINT32_FORMAT;
*UINT64_FORMAT = *work_queuec::UINT64_FORMAT;
*UPTR_FORMAT = *work_queuec::UPTR_FORMAT;
*TIMESTAMP_FORMAT = *work_queuec::TIMESTAMP_FORMAT;
*WORK_QUEUE_DEFAULT_PORT = *work_queuec::WORK_QUEUE_DEFAULT_PORT;
*WORK_QUEUE_RANDOM_PORT = *work_queuec::WORK_QUEUE_RANDOM_PORT;
*WORK_QUEUE_LINE_MAX = *work_queuec::WORK_QUEUE_LINE_MAX;
*WORK_QUEUE_WAITFORTASK = *work_queuec::WORK_QUEUE_WAITFORTASK;
*WORK_QUEUE_RETURN_STATUS_UNSET = *work_queuec::WORK_QUEUE_RETURN_STATUS_UNSET;
*WORK_QUEUE_RESULT_UNSET = *work_queuec::WORK_QUEUE_RESULT_UNSET;
*WORK_QUEUE_RESULT_INPUT_FAIL = *work_queuec::WORK_QUEUE_RESULT_INPUT_FAIL;
*WORK_QUEUE_RESULT_INPUT_MISSING = *work_queuec::WORK_QUEUE_RESULT_INPUT_MISSING;
*WORK_QUEUE_RESULT_FUNCTION_FAIL = *work_queuec::WORK_QUEUE_RESULT_FUNCTION_FAIL;
*WORK_QUEUE_RESULT_OUTPUT_FAIL = *work_queuec::WORK_QUEUE_RESULT_OUTPUT_FAIL;
*WORK_QUEUE_RESULT_OUTPUT_MISSING = *work_queuec::WORK_QUEUE_RESULT_OUTPUT_MISSING;
*WORK_QUEUE_RESULT_LINK_FAIL = *work_queuec::WORK_QUEUE_RESULT_LINK_FAIL;
*WORK_QUEUE_SCHEDULE_UNSET = *work_queuec::WORK_QUEUE_SCHEDULE_UNSET;
*WORK_QUEUE_SCHEDULE_FCFS = *work_queuec::WORK_QUEUE_SCHEDULE_FCFS;
*WORK_QUEUE_SCHEDULE_FILES = *work_queuec::WORK_QUEUE_SCHEDULE_FILES;
*WORK_QUEUE_SCHEDULE_TIME = *work_queuec::WORK_QUEUE_SCHEDULE_TIME;
*WORK_QUEUE_SCHEDULE_DEFAULT = *work_queuec::WORK_QUEUE_SCHEDULE_DEFAULT;
*WORK_QUEUE_SCHEDULE_PREFERRED_HOSTS = *work_queuec::WORK_QUEUE_SCHEDULE_PREFERRED_HOSTS;
*WORK_QUEUE_SCHEDULE_RAND = *work_queuec::WORK_QUEUE_SCHEDULE_RAND;
*WORK_QUEUE_SCHEDULE_MAX = *work_queuec::WORK_QUEUE_SCHEDULE_MAX;
*WORK_QUEUE_INPUT = *work_queuec::WORK_QUEUE_INPUT;
*WORK_QUEUE_OUTPUT = *work_queuec::WORK_QUEUE_OUTPUT;
*WORK_QUEUE_NOCACHE = *work_queuec::WORK_QUEUE_NOCACHE;
*WORK_QUEUE_CACHE = *work_queuec::WORK_QUEUE_CACHE;
*WORK_QUEUE_SYMLINK = *work_queuec::WORK_QUEUE_SYMLINK;
*WORK_QUEUE_PREEXIST = *work_queuec::WORK_QUEUE_PREEXIST;
*WORK_QUEUE_THIRDGET = *work_queuec::WORK_QUEUE_THIRDGET;
*WORK_QUEUE_THIRDPUT = *work_queuec::WORK_QUEUE_THIRDPUT;
*WORK_QUEUE_MASTER_MODE_STANDALONE = *work_queuec::WORK_QUEUE_MASTER_MODE_STANDALONE;
*WORK_QUEUE_MASTER_MODE_CATALOG = *work_queuec::WORK_QUEUE_MASTER_MODE_CATALOG;
*WORK_QUEUE_NAME_MAX = *work_queuec::WORK_QUEUE_NAME_MAX;
*WORK_QUEUE_MASTER_PRIORITY_MAX = *work_queuec::WORK_QUEUE_MASTER_PRIORITY_MAX;
*WORK_QUEUE_MASTER_PRIORITY_DEFAULT = *work_queuec::WORK_QUEUE_MASTER_PRIORITY_DEFAULT;
*WORK_QUEUE_WORKER_MODE_SHARED = *work_queuec::WORK_QUEUE_WORKER_MODE_SHARED;
*WORK_QUEUE_WORKER_MODE_EXCLUSIVE = *work_queuec::WORK_QUEUE_WORKER_MODE_EXCLUSIVE;
*WORK_QUEUE_CATALOG_LINE_MAX = *work_queuec::WORK_QUEUE_CATALOG_LINE_MAX;
*WORK_QUEUE_CATALOG_UPDATE_INTERVAL = *work_queuec::WORK_QUEUE_CATALOG_UPDATE_INTERVAL;
*WORK_QUEUE_CATALOG_LIFETIME = *work_queuec::WORK_QUEUE_CATALOG_LIFETIME;
*WORK_QUEUE_FS_CMD = *work_queuec::WORK_QUEUE_FS_CMD;
*WORK_QUEUE_FS_PATH = *work_queuec::WORK_QUEUE_FS_PATH;
*WORK_QUEUE_FS_SYMLINK = *work_queuec::WORK_QUEUE_FS_SYMLINK;
*wq_option_fast_abort_multiplier = *work_queuec::wq_option_fast_abort_multiplier;
*wq_option_scheduler = *work_queuec::wq_option_scheduler;
1;
