
INSTALL

Here's quick guide for the installation of WorkQueue for use with 
MSMAccelerator. The process follows a typical configure/make/install
flow, but there are a few tricks to get the python bindings to
compile and work.


-- LINUX

First, configure. Here's what worked for me, using the Enthought
python package (installed in ~/EPD/) on Linux:

  $ ./configure --prefix ~/cctools --with-python-path ~/EPD/
        --with-swig-path ~/EPD/bin

you need to be sure to point the swig path to the swig installation
associated with your python. Note also the lack of '=' signs.

Next, make and install

  $ make
  $ make install

Unfortunately, this puts the python site package in

  <cctools-prefix>/lib/pythonX.X/site-packages

so you need to copy it over into your python installation, for me
this looked like

  $ cp -r ~/cctools/lib/python2.7/site-packages/* \
        ~/EPD/lib/python2.7/site-packages

Finally, add "~/cctools/bin" (or equivalent) to your $PATH in your
.bash_profile (or whatever).

You'll want to test everything worked. Try:

  $ which work_queue_worker

and

  $ python
  >>> import work_queue

both should return without throwing exceptions.


-- MAC OS

Compilation on OSX should be similar to the process outlined above
for Linux, with a few modifications.

Robert McGibbon has struggled, and succeeded, to compile work_queue
on a Mac. Here's his advice:


My flags to configure:


  $ ./configure --with-python-path /Library/Frameworks/EPD64.framework/Versions/Current/ --prefix /Users/rmcgibbo/local/cctools --with-swig-path /Library/Frameworks/EPD64.framework/Versions/Current/bin

The first relevant point is that the configure script looks in /usr/bin for 
python and swig, without checking `which` or your $PATH. So without special 
flags, it will find the wrong swig and python, even though they are at the 
top of my path.

  $ which swig
  /Library/Frameworks/EPD64.framework/Versions/Current/bin/swig

  $ which python
  /Library/Frameworks/EPD64.framework/Versions/Current/bin/python

Second, I had some trouble with the perl modules. The dynamic linker was 
complaining that that "file was built for unsupported file format which is not
the architecture being linked". I assume that this might have something to do
with the fact that I'm using python version of swig with perl or something.
Anyways, since I don't care about perl support I was able to change the variable
"config_perl_path" from auto to no at the top of the configure script.

Third, in work_queue/src/python/Makefile, I noticed the funny symlinking of 
/System/Library/Frameworks/Python.framework. This is commented a little bit. 
It's basically a work around for a bug in python's sysconfig module not emitting
a fully rooted path for for the 'LINKFORSHARED' field. i.e. sysconfig gives 
something like "EPD64.framework/Versions/7.2/Python" when it should give
"/Library/EPD64.framework/Versions/7.2/Python". But by hardcoding the string 
"/System/Library/Frameworks/Python.framework" into the makefile, it really 
prevents me from using my python distribution thats installed in a nonstandard 
place. The easiest workaround was just to change the CPYTHON_LDFLAGS string in 
Makefile.config so that the symlinking is unnecessary.


-- TJL 5.9.12







