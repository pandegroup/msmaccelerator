#!/usr/bin/env python
# This file is part of MSMAccelerator.
#
# Copyright 2011 Stanford University
#
# MSMAccelerator is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA


import sys
import re

from glob import glob

from argparse import ArgumentParser

from Emsmbuilder import metrics
from Emsmbuilder import clustering
from Emsmbuilder import Trajectory

from monakos import Project

from numpy import zeros, arange
import matplotlib.pyplot as pp


# parse args
parser = ArgumentParser(description='Plot number of states vs. amount of data')
parser.add_argument('params_fn', help='Monakos Parameters File (yaml)')
parser.add_argument('stride', help='''Stride at which to cluster trajectories. E.g. if this is 5, the script will re-cluster at 5, 10, 15, ... trajectories added''')
args = parser.parse_args()
project = Project(args.params_fn)
stride = int(args.stride)

for ff in project.forcefields:

    # load in trajectory data
    traj_dir = project.rootdir + '/' + ff['name'] + '/Trajectories/*.lh5'
    print "Looking for data in: %s" % traj_dir
    traj_fnames = glob( traj_dir)
    traj_fnames = sorted( traj_fnames, key=lambda s : int( re.search('(\d+)[.]lh5', s).group(1) ) )

    # load the trajectories into memory
    trajs = []
    for fn in traj_fnames:
        trajs.append( Trajectory.LoadTrajectoryFile( fn ) )
    num_trajs = len(trajs)
    print "Loaded %d trajectories from %s" % (num_trajs, ff)

    # perform clustering, adding trajectories at specified incrememnts
    num_clusters = zeros( num_trajs )
    for i in range( stride, num_trajs, stride ):
        print "Clustering %d of %d trajectories" % (i, num_trajs)
        sys.stdout = open('/dev/null', 'w') # work around excessive verbosity
        generators = project.clusterer( trajectories=trajs[:i] ).get_generators_as_traj()
        sys.stdout = sys.__stdout__
        num_clusters[i] = len(generators["XYZList"])

    print num_clusters[arange(0, num_trajs, stride)]
    pp.plot( arange( 0, num_trajs, stride ), num_clusters[ arange( 0, num_trajs, stride ) ], 'x-')
    

    
pp.xlabel('Number of Trajectories')
pp.ylabel('Number of MSM microstates')
pp.show()

