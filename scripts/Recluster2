#!/usr/bin/env python
# This file is part of MSMAccelerator.
#
# Copyright 2011 Stanford University
#
# MSMAccelerator is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

import sys, os
import re
import numpy as np
from glob import glob
from Emsmbuilder import Trajectory
from Emsmbuilder.scripts.Cluster import parser, construct_metric, add_argument
from Emsmbuilder import clustering
from monakos import Project
import matplotlib.pyplot as pp

def load_trajectories(params, stride):
    proj = Project(params)
    for ff in proj.forcefields:
        tdir = proj.traj_dir(ff['name'])
        tfn = glob(os.path.join(tdir, '*.lh5'))
        
        #tfn.extend(glob('/home/tjlane/EvenSampling/p1/amber99sb-ildn/Trajectories/*.lh5'))
        
        tfn = sorted(tfn, key=lambda s: int(re.search('(\d+)[.]lh5', s).group(1)))
        trajs = [Trajectory.LoadTrajectoryFile(s) for s in tfn]
        ff['trajs'] = trajs
        

    return proj.forcefields

def num_cluster_centers(metric, ptraj, args):
    if args.alg == 'kcenters':
        result = clustering._kcenters(metric, ptraj, k=args.kcenters_num_clusters,
            distance_cutoff=args.kcenters_distance_cutoff, seed=args.kcenters_seed,
            verbose=False)
            
    return len(result[0]) # result[0] is the indices of the generators

def replace_project(parser):
    for i, act in enumerate(parser._actions):
        if act.dest == 'project':
            act.help = 'Path to MonakosParams file. Default: MonakosParams.yaml'
            act.default = 'MonakosParams.yaml'
            
#import IPython as ip; ip.embed()
replace_project(parser)
args = parser.parse_args()

metric = construct_metric(args)
forcefields = load_trajectories(args.project, args.stride)

for ff in forcefields:
    trajs = ff['trajs']
    num_trajs = len(trajs)
    cum_traj_lengths = np.cumsum([len(traj) for traj in trajs])
    print 'Loaded %d trajs' % num_trajs
    ptraj = metric.prepare_trajectory(clustering.concatenate_trajectories(trajs))
    print 'Prepared. Clustering...'
    
    l = []
    k = []
    for i in range(0, num_trajs, args.stride):
        l.append(cum_traj_lengths[i])
        k.append(num_cluster_centers(metric, ptraj[:cum_traj_lengths[i]], args))
        print 'Trajs up to: {i}, clusters: {k}'.format(i=i, k=k[-1])
    pp.plot(l, k)
    
    pp.show()


