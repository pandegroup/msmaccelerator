#!/usr/bin/env python
import sys, os
from monakos import Project
import numpy as np
import random
from collections import defaultdict
from Emsmbuilder import Serializer
from Emsmbuilder.Trajectory import Trajectory
from Emsmbuilder.clustering import empty_trajectory_like
from argparse import ArgumentParser

parser = ArgumentParser('Monakos: Rip PDBs from (a) Microstate(s)')
parser.add_argument('-r', '--round', type=int, required=True)
parser.add_argument('-f', '--forcefield', type=str, required=True)
parser.add_argument('-m', '--microstate', type=int, required=True, nargs='+')
parser.add_argument('-n', '--number', type=int, required=True)
parser.add_argument('-p', '--params', type=str, required=True)
args = parser.parse_args()

project = Project(args.params)

inverse_assignments = defaultdict(lambda: [])
assignments = Serializer.LoadData(project.assignments_fn(args.forcefield, args.round))

# build a mapping MSM microstates to trajnum/framenum
for i in xrange(assignments.shape[0]):
    for j in xrange(assignments.shape[1]):
        if assignments[i,j] != -1:
            inverse_assignments[assignments[i,j]].append((i,j))

sample_trajectory = Trajectory.LoadTrajectoryFile(project.pdb_topology_file)
lh5_fns = [r for r in project.builder_log if r['round_num'] == args.round][0]['lh5_fns']

for m in args.microstate:
    trj_frame = random.sample(inverse_assignments[m], args.number)
    t = empty_trajectory_like(sample_trajectory)
    for trj_i, frame_i in trj_frame:
        coords = np.array([Trajectory.ReadLHDF5Frame(lh5_fns[trj_i], frame_i)])
        if t['XYZList'] is None:
            t['XYZList'] = coords
        else:
            t['XYZList'] = np.vstack((t['XYZList'], coords))

    out_fn = 'round-{r}_state-{m}_nsamples-{n}.pdb'.format(r=args.round, m=m, n=args.number)
    print 'Saving {out_fn}'.format(out_fn=out_fn)
    t.SaveToPDB(out_fn)
                    
