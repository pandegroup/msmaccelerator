#!/usr/bin/env python
import os, sys
from msmbuilder import arglib
from msmaccelerator import Sampling, QMaster, Builder, Brain, Project
import logging
from msmaccelerator.utils import GMailHandler
import IPython as ip

def setup_logger(file_level, email_level, filename, email_addrs, email_subject='MSMAccelerator Log'):
    logger = logging.getLogger('MSMAccelerator')
    logger.setLevel(logging.DEBUG)
    
    formatter = logging.Formatter('%(name)s: %(asctime)s: %(levelname)s: %(message)s', '%m/%d/%y [%H:%M:%S]')
    
    if len(email_addrs) > 0:
        gmail_handler = GMailHandler(email_addrs, email_subject)
        gmail_handler.setLevel(email_level)
        gmail_handler.setFormatter(formatter)
        logger.addHandler(gmail_handler)
    
    file_handler = logging.FileHandler(filename)
    file_handler.setLevel(file_level)
    file_handler.setFormatter(formatter)
    
    console_handler = logging.StreamHandler()
    console_handler.setLevel(file_level)
    console_handler.setFormatter(formatter)
    
    logger.addHandler(file_handler)
    
    return logger
    
def main():

    # Parse arguments
    parser = arglib.ArgumentParser(description='MSMAccelerator: Adaptive Sampling Markov State Model Molecular Dynamics')
    parser.add_argument('project_filename', description='MSMAccelerator Project File (.yaml)')
    parser.add_argument('port', description='Port for work queue to send jobs on.', default=5521, type=int)
    parser.add_argument('file_log', description='Filename to log to')
    parser.add_argument('email_log', description='Email address(es) to send log events to', nargs='+', type=list, default=[])
    parser.add_argument('file_level', description='Log level for file',
        choices=['DEBUG', 'INFO', 'WARNING', 'ERROR', 'CRITICAL'], default='INFO')
    parser.add_argument('email_level', description='Email address to send log events to',
        choices=['DEBUG', 'INFO', 'WARNING', 'ERROR', 'CRITICAL'], default='ERROR')
    args = parser.parse_args()
    
    logger = setup_logger(args.file_level, args.email_level, args.file_log,
                          args.email_log, email_subject='MSMAccelerator {0}'.format(args.email_level))
    
    try:
        logger.info('Starting up')
        project = Project(args.project_filename)
        qmaster = QMaster(project, args.port)
        builder = Builder(project)
        brain   = Brain(project)
        cause   = 'queue empty'
        
        logger.info('Currently on round %d. Going to round %d' \
            % (builder.n_rounds, project.n_rounds))

        while builder.n_rounds < project.n_rounds:
            if cause == 'job returned':
                builder.run_round(checkdata=True)
                logger.info('Completed Round')
            
            if cause == 'queue empty':
                logger.info('Generating new job for round {0}'.format(builder.n_rounds))
                # build from round_num - 1, since that is the last completed round
                qmaster.submit(*brain.generate_job())
            
            cause = qmaster.wait()
            logger.info('Wakeup Cause: {0}'.format(cause))
            
    except Exception as e:
        if 'qmaster' in locals():
            qmaster.stop()
        logger.exception(e)
        raise
    finally:
        if 'qmaster' in locals():
            logger.info('Shutting down work queue')
            qmaster.stop()
        logger.critical('MSMAccelerator exiting')
        

if __name__ == '__main__':
    main()
