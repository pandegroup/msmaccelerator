#!/usr/bin/env python
# This file is part of MSMAccelerator.
#
# Copyright 2011 Stanford University
#
# MSMAccelerator is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

# encoding: utf-8
import sys, os, re
from monakos import Project
from Emsmbuilder import MSMLib, metrics, clustering, Trajectory
import scipy.io
import numpy as np
import matplotlib.pyplot as pp
import IPython as ip
from glob import glob

metric = metrics.RMSD(np.loadtxt('/home/rmcgibbo/monakos/test-project/AtomIndices.dat', int))
kcenters_num_clusters = None
kcenters_distance_cutoff = 0.12

class C(clustering.BaseFlatClusterer):
    def __init__(self):
        pass



project = Project(sys.argv[1])
for ff in project.forcefields:
    num_top = 10
    top = np.zeros((num_top, project.num_rounds))
    timescale = np.zeros(project.num_rounds)
    num_states = np.zeros_like(timescale)
    
    tdir = project.traj_dir(ff['name'])
    tfn = glob(os.path.join(tdir, '*.lh5'))
    tfn = sorted(tfn, key=lambda s: int(re.search('(\d+)[.]lh5', s).group(1)))
    trajs = [Trajectory.LoadTrajectoryFile(s) for s in tfn]
    ptraj = metric.prepare_trajectory(clustering.concatenate_trajectories(trajs))
    cum_traj_lengths = np.cumsum([len(traj) for traj in trajs])
    
    stide = range(0, project.num_rounds, 2)
    for round in stide:
        #countsfn = project.counts_fn(ff['name'], round)
        #counts = scipy.io.mmread(countsfn)
        g, a, d = clustering._kcenters(metric, ptraj[0:cum_traj_lengths[round]], k=kcenters_num_clusters,
            distance_cutoff=kcenters_distance_cutoff, verbose=False)
        c = C()
        c.generator_indices = g
        c.assignments = a
        c.distances = d
        c._traj_lengths = [len(trajs[i]) for i in range(round+1)]
        c.num_frames = sum(c._traj_lengths)
        assignments = c.get_assignments()
        counts = MSMLib.GetCountMatrixFromAssignments(assignments)
        
        
        #try:
        tprob = MSMLib.EstimateTransitionMatrix(counts)
        values, vectors = MSMLib.GetEigenvectors(tprob, 2)
        
        if not abs(values[0] - 1) < 1e-10: raise Exception('Bad news bears')
        s = np.sort(np.real(vectors[:,0]).flatten())[::-1]
        #print s
        if len(s) < num_top:
            top[0:len(s), round] = s
        else:
            top[:, round] = s[:num_top]
            
        timescale[round] = -1 / np.log(np.real(values[1]))
        num_states[round] = tprob.shape[0]
        
        print timescale[round], num_states[round], round
    
        #densecounts = counts.todense()
        #for i in range(counts.shape[0]):
        #    for j in range(counts.shape[1]):
        #        print '%3d' % densecounts[i,j],
        #    print
        #print
            
        #except:
        #    print 'Round {r} failed'.format(r=round)
    
    pp.subplot(311)
    for i in range(top.shape[0]):
        pp.plot(top[i,stide], label=str(i))
    #pp.plot(range(project.num_rounds), top.sum(axis=0), label='top 10')
    pp.legend()
    
    pp.subplot(312)
    pp.plot(timescale[stide])
    
    pp.subplot(313)
    pp.plot(num_states[stide])

pp.show()